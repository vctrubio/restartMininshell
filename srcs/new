	pid = fork();
	if (pid == 0)
	{
		if (ptr->pipe) //
		{
			printf("do_cmd_pipe\n");
			//READ N WRITE
			// if (ptr->pipe->pid == 0)
			// 	printf("in the child\n");
			// else
			// 	printf("in the parent\n");

		}


		
		else if (ptr->file)
		{
			saved_stdout = dup(1);
			printf("WE found a file and need to dup[]\n");
			ptr->file->fd = open(ptr->file->filename,
									O_WRONLY | O_CREAT | O_APPEND,
									0777);
			dup2(ptr->file->fd, STDOUT_FILENO);
			close(ptr->file->fd);
		}
		execve(path, ptr->args, _shell()->envp);
		//dup2 to redirect STDIO back to standard saved saved_stdout
		printf("execve (SHOULD NOT SHOW) if execve is called succesfully\n");

	}
	else
	{
		waitpid(pid, &status, WUNTRACED);
		free(path);
	}